// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: gameserver.proto

package ai

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{0}
}

func (x *Test) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

func (x *Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol.ProtoReflect.Descriptor instead.
func (*Protocol) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{1}
}

func (x *Protocol) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Protocol) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type ScProtocolPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pack []*Protocol `protobuf:"bytes,2,rep,name=pack,proto3" json:"pack,omitempty"`
}

func (x *ScProtocolPack) Reset() {
	*x = ScProtocolPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScProtocolPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScProtocolPack) ProtoMessage() {}

func (x *ScProtocolPack) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScProtocolPack.ProtoReflect.Descriptor instead.
func (*ScProtocolPack) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{2}
}

func (x *ScProtocolPack) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScProtocolPack) GetPack() []*Protocol {
	if x != nil {
		return x.Pack
	}
	return nil
}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{3}
}

type ScGameDebug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ScGameDebug) Reset() {
	*x = ScGameDebug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameDebug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameDebug) ProtoMessage() {}

func (x *ScGameDebug) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameDebug.ProtoReflect.Descriptor instead.
func (*ScGameDebug) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{4}
}

func (x *ScGameDebug) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type StHuDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type1      int32   `protobuf:"varint,1,opt,name=type1,proto3" json:"type1,omitempty"`
	Type2      int32   `protobuf:"varint,2,opt,name=type2,proto3" json:"type2,omitempty"`
	Gen        int32   `protobuf:"varint,3,opt,name=gen,proto3" json:"gen,omitempty"`
	SelfMo     bool    `protobuf:"varint,4,opt,name=self_mo,json=selfMo,proto3" json:"self_mo,omitempty"`
	Fan        int32   `protobuf:"varint,5,opt,name=fan,proto3" json:"fan,omitempty"`
	Types      []int32 `protobuf:"varint,6,rep,packed,name=types,proto3" json:"types,omitempty"`
	Order      int32   `protobuf:"varint,7,opt,name=order,proto3" json:"order,omitempty"`                               //胡牌顺序
	GiveHuSeat int32   `protobuf:"varint,8,opt,name=give_hu_seat,json=giveHuSeat,proto3" json:"give_hu_seat,omitempty"` //放胡的人
}

func (x *StHuDesc) Reset() {
	*x = StHuDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StHuDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StHuDesc) ProtoMessage() {}

func (x *StHuDesc) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StHuDesc.ProtoReflect.Descriptor instead.
func (*StHuDesc) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{5}
}

func (x *StHuDesc) GetType1() int32 {
	if x != nil {
		return x.Type1
	}
	return 0
}

func (x *StHuDesc) GetType2() int32 {
	if x != nil {
		return x.Type2
	}
	return 0
}

func (x *StHuDesc) GetGen() int32 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *StHuDesc) GetSelfMo() bool {
	if x != nil {
		return x.SelfMo
	}
	return false
}

func (x *StHuDesc) GetFan() int32 {
	if x != nil {
		return x.Fan
	}
	return 0
}

func (x *StHuDesc) GetTypes() []int32 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *StHuDesc) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *StHuDesc) GetGiveHuSeat() int32 {
	if x != nil {
		return x.GiveHuSeat
	}
	return 0
}

type ScGameHideActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScGameHideActions) Reset() {
	*x = ScGameHideActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameHideActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameHideActions) ProtoMessage() {}

func (x *ScGameHideActions) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameHideActions.ProtoReflect.Descriptor instead.
func (*ScGameHideActions) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{6}
}

type StplayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid       int64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Idtype    string `protobuf:"bytes,3,opt,name=idtype,proto3" json:"idtype,omitempty"`
	NickName  string `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	RoomCard  int64  `protobuf:"varint,5,opt,name=room_card,json=roomCard,proto3" json:"room_card,omitempty"`
	Gold      int64  `protobuf:"varint,6,opt,name=gold,proto3" json:"gold,omitempty"`
	Sex       int32  `protobuf:"varint,7,opt,name=sex,proto3" json:"sex,omitempty"`
	Portrait  string `protobuf:"bytes,8,opt,name=portrait,proto3" json:"portrait,omitempty"`
	Ip        string `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`
	Location  string `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	Exp       int32  `protobuf:"varint,11,opt,name=exp,proto3" json:"exp,omitempty"`
	Online    bool   `protobuf:"varint,12,opt,name=online,proto3" json:"online,omitempty"`
	AutoPlay  bool   `protobuf:"varint,13,opt,name=auto_play,json=autoPlay,proto3" json:"auto_play,omitempty"`
	Signature string `protobuf:"bytes,14,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *StplayerInfo) Reset() {
	*x = StplayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StplayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StplayerInfo) ProtoMessage() {}

func (x *StplayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StplayerInfo.ProtoReflect.Descriptor instead.
func (*StplayerInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{7}
}

func (x *StplayerInfo) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *StplayerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StplayerInfo) GetIdtype() string {
	if x != nil {
		return x.Idtype
	}
	return ""
}

func (x *StplayerInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *StplayerInfo) GetRoomCard() int64 {
	if x != nil {
		return x.RoomCard
	}
	return 0
}

func (x *StplayerInfo) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *StplayerInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *StplayerInfo) GetPortrait() string {
	if x != nil {
		return x.Portrait
	}
	return ""
}

func (x *StplayerInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *StplayerInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *StplayerInfo) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *StplayerInfo) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *StplayerInfo) GetAutoPlay() bool {
	if x != nil {
		return x.AutoPlay
	}
	return false
}

func (x *StplayerInfo) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type StHandSeq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count  int32   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Pokers []int32 `protobuf:"varint,2,rep,packed,name=pokers,proto3" json:"pokers,omitempty"`
}

func (x *StHandSeq) Reset() {
	*x = StHandSeq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StHandSeq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StHandSeq) ProtoMessage() {}

func (x *StHandSeq) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StHandSeq.ProtoReflect.Descriptor instead.
func (*StHandSeq) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{8}
}

func (x *StHandSeq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StHandSeq) GetPokers() []int32 {
	if x != nil {
		return x.Pokers
	}
	return nil
}

type ScenterSeatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *StplayerInfo `protobuf:"bytes,1,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	Ready      bool          `protobuf:"varint,2,opt,name=ready,proto3" json:"ready,omitempty"`
	SeatIndex  int32         `protobuf:"varint,3,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	Money      int32         `protobuf:"varint,4,opt,name=money,proto3" json:"money,omitempty"`
}

func (x *ScenterSeatInfo) Reset() {
	*x = ScenterSeatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenterSeatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenterSeatInfo) ProtoMessage() {}

func (x *ScenterSeatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenterSeatInfo.ProtoReflect.Descriptor instead.
func (*ScenterSeatInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{9}
}

func (x *ScenterSeatInfo) GetPlayerInfo() *StplayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *ScenterSeatInfo) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *ScenterSeatInfo) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *ScenterSeatInfo) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

type SccontinueSeatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex    int32            `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	PlayerInfo   *StplayerInfo    `protobuf:"bytes,2,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	Ready        bool             `protobuf:"varint,3,opt,name=ready,proto3" json:"ready,omitempty"`
	Lack         int32            `protobuf:"varint,4,opt,name=lack,proto3" json:"lack,omitempty"`
	IsHu         bool             `protobuf:"varint,5,opt,name=is_hu,json=isHu,proto3" json:"is_hu,omitempty"`
	HuSeq        []int32          `protobuf:"varint,6,rep,packed,name=hu_seq,json=huSeq,proto3" json:"hu_seq,omitempty"`
	HandSeqCount int32            `protobuf:"varint,7,opt,name=hand_seq_count,json=handSeqCount,proto3" json:"hand_seq_count,omitempty"`
	MoCount      int32            `protobuf:"varint,8,opt,name=mo_count,json=moCount,proto3" json:"mo_count,omitempty"`
	HandSeq      *StHandSeq       `protobuf:"bytes,9,opt,name=hand_seq,json=handSeq,proto3" json:"hand_seq,omitempty"`
	ComplexSeq   []*SccomplexTile `protobuf:"bytes,10,rep,name=complex_seq,json=complexSeq,proto3" json:"complex_seq,omitempty"`
	ChuedSeq     []int32          `protobuf:"varint,11,rep,packed,name=chued_seq,json=chuedSeq,proto3" json:"chued_seq,omitempty"`
	HuDesc       *StHuDesc        `protobuf:"bytes,12,opt,name=hu_desc,json=huDesc,proto3" json:"hu_desc,omitempty"`
	IsBaojiao    bool             `protobuf:"varint,13,opt,name=is_baojiao,json=isBaojiao,proto3" json:"is_baojiao,omitempty"` // 是否报叫
	Money        int32            `protobuf:"varint,14,opt,name=money,proto3" json:"money,omitempty"`
	SureAction   int32            `protobuf:"varint,15,opt,name=sure_action,json=sureAction,proto3" json:"sure_action,omitempty"` // 确认的动作
	Piao         int32            `protobuf:"varint,16,opt,name=piao,proto3" json:"piao,omitempty"`
	BaiPai       []int32          `protobuf:"varint,17,rep,packed,name=bai_pai,json=baiPai,proto3" json:"bai_pai,omitempty"`
	BaiPaiHuSeq  []int32          `protobuf:"varint,18,rep,packed,name=bai_pai_hu_seq,json=baiPaiHuSeq,proto3" json:"bai_pai_hu_seq,omitempty"`
}

func (x *SccontinueSeatInfo) Reset() {
	*x = SccontinueSeatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SccontinueSeatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SccontinueSeatInfo) ProtoMessage() {}

func (x *SccontinueSeatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SccontinueSeatInfo.ProtoReflect.Descriptor instead.
func (*SccontinueSeatInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{10}
}

func (x *SccontinueSeatInfo) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *SccontinueSeatInfo) GetPlayerInfo() *StplayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *SccontinueSeatInfo) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *SccontinueSeatInfo) GetLack() int32 {
	if x != nil {
		return x.Lack
	}
	return 0
}

func (x *SccontinueSeatInfo) GetIsHu() bool {
	if x != nil {
		return x.IsHu
	}
	return false
}

func (x *SccontinueSeatInfo) GetHuSeq() []int32 {
	if x != nil {
		return x.HuSeq
	}
	return nil
}

func (x *SccontinueSeatInfo) GetHandSeqCount() int32 {
	if x != nil {
		return x.HandSeqCount
	}
	return 0
}

func (x *SccontinueSeatInfo) GetMoCount() int32 {
	if x != nil {
		return x.MoCount
	}
	return 0
}

func (x *SccontinueSeatInfo) GetHandSeq() *StHandSeq {
	if x != nil {
		return x.HandSeq
	}
	return nil
}

func (x *SccontinueSeatInfo) GetComplexSeq() []*SccomplexTile {
	if x != nil {
		return x.ComplexSeq
	}
	return nil
}

func (x *SccontinueSeatInfo) GetChuedSeq() []int32 {
	if x != nil {
		return x.ChuedSeq
	}
	return nil
}

func (x *SccontinueSeatInfo) GetHuDesc() *StHuDesc {
	if x != nil {
		return x.HuDesc
	}
	return nil
}

func (x *SccontinueSeatInfo) GetIsBaojiao() bool {
	if x != nil {
		return x.IsBaojiao
	}
	return false
}

func (x *SccontinueSeatInfo) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *SccontinueSeatInfo) GetSureAction() int32 {
	if x != nil {
		return x.SureAction
	}
	return 0
}

func (x *SccontinueSeatInfo) GetPiao() int32 {
	if x != nil {
		return x.Piao
	}
	return 0
}

func (x *SccontinueSeatInfo) GetBaiPai() []int32 {
	if x != nil {
		return x.BaiPai
	}
	return nil
}

func (x *SccontinueSeatInfo) GetBaiPaiHuSeq() []int32 {
	if x != nil {
		return x.BaiPaiHuSeq
	}
	return nil
}

type CsReadyGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mingpai int32 `protobuf:"varint,1,opt,name=mingpai,proto3" json:"mingpai,omitempty"` //明牌开始
}

func (x *CsReadyGame) Reset() {
	*x = CsReadyGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsReadyGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsReadyGame) ProtoMessage() {}

func (x *CsReadyGame) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsReadyGame.ProtoReflect.Descriptor instead.
func (*CsReadyGame) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{11}
}

func (x *CsReadyGame) GetMingpai() int32 {
	if x != nil {
		return x.Mingpai
	}
	return 0
}

type CsLeaveRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Why string `protobuf:"bytes,1,opt,name=why,proto3" json:"why,omitempty"`
}

func (x *CsLeaveRoom) Reset() {
	*x = CsLeaveRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsLeaveRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsLeaveRoom) ProtoMessage() {}

func (x *CsLeaveRoom) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsLeaveRoom.ProtoReflect.Descriptor instead.
func (*CsLeaveRoom) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{12}
}

func (x *CsLeaveRoom) GetWhy() string {
	if x != nil {
		return x.Why
	}
	return ""
}

type CsGameAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //see protocol.lua
	Reply  uint32  `protobuf:"varint,2,opt,name=reply,proto3" json:"reply,omitempty"`
	Pokers []int32 `protobuf:"varint,3,rep,packed,name=pokers,proto3" json:"pokers,omitempty"` //牌
}

func (x *CsGameAction) Reset() {
	*x = CsGameAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsGameAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsGameAction) ProtoMessage() {}

func (x *CsGameAction) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsGameAction.ProtoReflect.Descriptor instead.
func (*CsGameAction) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{13}
}

func (x *CsGameAction) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsGameAction) GetReply() uint32 {
	if x != nil {
		return x.Reply
	}
	return 0
}

func (x *CsGameAction) GetPokers() []int32 {
	if x != nil {
		return x.Pokers
	}
	return nil
}

type StLackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex int32 `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	Lack      int32 `protobuf:"varint,2,opt,name=lack,proto3" json:"lack,omitempty"`
}

func (x *StLackInfo) Reset() {
	*x = StLackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StLackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StLackInfo) ProtoMessage() {}

func (x *StLackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StLackInfo.ProtoReflect.Descriptor instead.
func (*StLackInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{14}
}

func (x *StLackInfo) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *StLackInfo) GetLack() int32 {
	if x != nil {
		return x.Lack
	}
	return 0
}

type ScLackInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*StLackInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *ScLackInfos) Reset() {
	*x = ScLackInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScLackInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScLackInfos) ProtoMessage() {}

func (x *ScLackInfos) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScLackInfos.ProtoReflect.Descriptor instead.
func (*ScLackInfos) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{15}
}

func (x *ScLackInfos) GetInfos() []*StLackInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type StDismissInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex int32 `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	Dismiss   int32 `protobuf:"varint,2,opt,name=dismiss,proto3" json:"dismiss,omitempty"`
}

func (x *StDismissInfo) Reset() {
	*x = StDismissInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StDismissInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StDismissInfo) ProtoMessage() {}

func (x *StDismissInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StDismissInfo.ProtoReflect.Descriptor instead.
func (*StDismissInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{16}
}

func (x *StDismissInfo) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *StDismissInfo) GetDismiss() int32 {
	if x != nil {
		return x.Dismiss
	}
	return 0
}

type ScContinueGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankerSeat         int32                 `protobuf:"varint,1,opt,name=banker_seat,json=bankerSeat,proto3" json:"banker_seat,omitempty"`
	SeatIndex          int32                 `protobuf:"varint,2,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	LackSecond         int32                 `protobuf:"varint,3,opt,name=lack_second,json=lackSecond,proto3" json:"lack_second,omitempty"`
	CurrTurn           int32                 `protobuf:"varint,4,opt,name=curr_turn,json=currTurn,proto3" json:"curr_turn,omitempty"` // waiting for chu
	TurnSecond         int32                 `protobuf:"varint,5,opt,name=turn_second,json=turnSecond,proto3" json:"turn_second,omitempty"`
	Thinking           bool                  `protobuf:"varint,6,opt,name=thinking,proto3" json:"thinking,omitempty"`
	ThinkSecond        int32                 `protobuf:"varint,7,opt,name=think_second,json=thinkSecond,proto3" json:"think_second,omitempty"`
	ShowActions        []int32               `protobuf:"varint,8,rep,packed,name=show_actions,json=showActions,proto3" json:"show_actions,omitempty"`
	SeatInfoes         []*SccontinueSeatInfo `protobuf:"bytes,9,rep,name=seat_infoes,json=seatInfoes,proto3" json:"seat_infoes,omitempty"`
	TilesRemain        int32                 `protobuf:"varint,10,opt,name=tiles_remain,json=tilesRemain,proto3" json:"tiles_remain,omitempty"`
	Roomid             int32                 `protobuf:"varint,11,opt,name=roomid,proto3" json:"roomid,omitempty"`
	RoomBase           int32                 `protobuf:"varint,15,opt,name=room_base,json=roomBase,proto3" json:"room_base,omitempty"`
	RoomPwd            string                `protobuf:"bytes,16,opt,name=room_pwd,json=roomPwd,proto3" json:"room_pwd,omitempty"`
	CurrentRound       int32                 `protobuf:"varint,17,opt,name=current_round,json=currentRound,proto3" json:"current_round,omitempty"` //当前局数
	GameConfig         string                `protobuf:"bytes,18,opt,name=game_config,json=gameConfig,proto3" json:"game_config,omitempty"`
	Gametype           string                `protobuf:"bytes,19,opt,name=gametype,proto3" json:"gametype,omitempty"`                             //wzmj, bloodwar
	Place              string                `protobuf:"bytes,20,opt,name=place,proto3" json:"place,omitempty"`                                   //custom, wzmj_c1
	OwnerSeat          int32                 `protobuf:"varint,21,opt,name=owner_seat,json=ownerSeat,proto3" json:"owner_seat,omitempty"`         // 房主
	ExchangeInfo       *ScExchangeInfo       `protobuf:"bytes,22,opt,name=exchange_info,json=exchangeInfo,proto3" json:"exchange_info,omitempty"` // 换牌信息
	DismissApply       bool                  `protobuf:"varint,23,opt,name=dismiss_apply,json=dismissApply,proto3" json:"dismiss_apply,omitempty"`
	DismissSecond      int32                 `protobuf:"varint,24,opt,name=dismiss_second,json=dismissSecond,proto3" json:"dismiss_second,omitempty"`
	DismissInfo        []*StDismissInfo      `protobuf:"bytes,25,rep,name=dismiss_info,json=dismissInfo,proto3" json:"dismiss_info,omitempty"`                           //0代表可以选择，1代表同意, 2代表拒绝
	LastChuedSeatIndex int32                 `protobuf:"varint,26,opt,name=last_chued_seat_index,json=lastChuedSeatIndex,proto3" json:"last_chued_seat_index,omitempty"` //上次出牌玩家
	CreaterId          int32                 `protobuf:"varint,27,opt,name=creater_id,json=createrId,proto3" json:"creater_id,omitempty"`
	CreaterType        string                `protobuf:"bytes,28,opt,name=creater_type,json=createrType,proto3" json:"creater_type,omitempty"`
}

func (x *ScContinueGame) Reset() {
	*x = ScContinueGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScContinueGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScContinueGame) ProtoMessage() {}

func (x *ScContinueGame) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScContinueGame.ProtoReflect.Descriptor instead.
func (*ScContinueGame) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{17}
}

func (x *ScContinueGame) GetBankerSeat() int32 {
	if x != nil {
		return x.BankerSeat
	}
	return 0
}

func (x *ScContinueGame) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *ScContinueGame) GetLackSecond() int32 {
	if x != nil {
		return x.LackSecond
	}
	return 0
}

func (x *ScContinueGame) GetCurrTurn() int32 {
	if x != nil {
		return x.CurrTurn
	}
	return 0
}

func (x *ScContinueGame) GetTurnSecond() int32 {
	if x != nil {
		return x.TurnSecond
	}
	return 0
}

func (x *ScContinueGame) GetThinking() bool {
	if x != nil {
		return x.Thinking
	}
	return false
}

func (x *ScContinueGame) GetThinkSecond() int32 {
	if x != nil {
		return x.ThinkSecond
	}
	return 0
}

func (x *ScContinueGame) GetShowActions() []int32 {
	if x != nil {
		return x.ShowActions
	}
	return nil
}

func (x *ScContinueGame) GetSeatInfoes() []*SccontinueSeatInfo {
	if x != nil {
		return x.SeatInfoes
	}
	return nil
}

func (x *ScContinueGame) GetTilesRemain() int32 {
	if x != nil {
		return x.TilesRemain
	}
	return 0
}

func (x *ScContinueGame) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *ScContinueGame) GetRoomBase() int32 {
	if x != nil {
		return x.RoomBase
	}
	return 0
}

func (x *ScContinueGame) GetRoomPwd() string {
	if x != nil {
		return x.RoomPwd
	}
	return ""
}

func (x *ScContinueGame) GetCurrentRound() int32 {
	if x != nil {
		return x.CurrentRound
	}
	return 0
}

func (x *ScContinueGame) GetGameConfig() string {
	if x != nil {
		return x.GameConfig
	}
	return ""
}

func (x *ScContinueGame) GetGametype() string {
	if x != nil {
		return x.Gametype
	}
	return ""
}

func (x *ScContinueGame) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *ScContinueGame) GetOwnerSeat() int32 {
	if x != nil {
		return x.OwnerSeat
	}
	return 0
}

func (x *ScContinueGame) GetExchangeInfo() *ScExchangeInfo {
	if x != nil {
		return x.ExchangeInfo
	}
	return nil
}

func (x *ScContinueGame) GetDismissApply() bool {
	if x != nil {
		return x.DismissApply
	}
	return false
}

func (x *ScContinueGame) GetDismissSecond() int32 {
	if x != nil {
		return x.DismissSecond
	}
	return 0
}

func (x *ScContinueGame) GetDismissInfo() []*StDismissInfo {
	if x != nil {
		return x.DismissInfo
	}
	return nil
}

func (x *ScContinueGame) GetLastChuedSeatIndex() int32 {
	if x != nil {
		return x.LastChuedSeatIndex
	}
	return 0
}

func (x *ScContinueGame) GetCreaterId() int32 {
	if x != nil {
		return x.CreaterId
	}
	return 0
}

func (x *ScContinueGame) GetCreaterType() string {
	if x != nil {
		return x.CreaterType
	}
	return ""
}

type ScEnterRoomFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason uint32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"` //0代表未知错误，1代表密码错误 2代表房间已经满了
	Desc   string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ScEnterRoomFailed) Reset() {
	*x = ScEnterRoomFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScEnterRoomFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScEnterRoomFailed) ProtoMessage() {}

func (x *ScEnterRoomFailed) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScEnterRoomFailed.ProtoReflect.Descriptor instead.
func (*ScEnterRoomFailed) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{18}
}

func (x *ScEnterRoomFailed) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *ScEnterRoomFailed) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type ScEnterRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex     int32              `protobuf:"varint,2,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	SeatInfoes    []*ScenterSeatInfo `protobuf:"bytes,3,rep,name=seat_infoes,json=seatInfoes,proto3" json:"seat_infoes,omitempty"`
	RoomBase      int32              `protobuf:"varint,7,opt,name=room_base,json=roomBase,proto3" json:"room_base,omitempty"`
	GameConfig    string             `protobuf:"bytes,8,opt,name=game_config,json=gameConfig,proto3" json:"game_config,omitempty"`
	Gametype      string             `protobuf:"bytes,9,opt,name=gametype,proto3" json:"gametype,omitempty"`                               //wzmj, bloodwar
	Place         string             `protobuf:"bytes,10,opt,name=place,proto3" json:"place,omitempty"`                                    //custom, wzmj_c1
	RoomPwd       string             `protobuf:"bytes,11,opt,name=room_pwd,json=roomPwd,proto3" json:"room_pwd,omitempty"`                 //房间密码
	CurrentRound  int32              `protobuf:"varint,12,opt,name=current_round,json=currentRound,proto3" json:"current_round,omitempty"` //当前局数
	OwnerSeat     int32              `protobuf:"varint,13,opt,name=owner_seat,json=ownerSeat,proto3" json:"owner_seat,omitempty"`          // 房主
	CreaterId     int32              `protobuf:"varint,14,opt,name=creater_id,json=createrId,proto3" json:"creater_id,omitempty"`
	CreaterType   string             `protobuf:"bytes,15,opt,name=creater_type,json=createrType,proto3" json:"creater_type,omitempty"`
	DismissApply  bool               `protobuf:"varint,16,opt,name=dismiss_apply,json=dismissApply,proto3" json:"dismiss_apply,omitempty"`
	DismissSecond int32              `protobuf:"varint,17,opt,name=dismiss_second,json=dismissSecond,proto3" json:"dismiss_second,omitempty"`
	DismissInfo   []*StDismissInfo   `protobuf:"bytes,18,rep,name=dismiss_info,json=dismissInfo,proto3" json:"dismiss_info,omitempty"` //0代表可以选择，1代表同意, 2代表拒绝
	ShowActions   []int32            `protobuf:"varint,19,rep,packed,name=show_actions,json=showActions,proto3" json:"show_actions,omitempty"`
}

func (x *ScEnterRoom) Reset() {
	*x = ScEnterRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScEnterRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScEnterRoom) ProtoMessage() {}

func (x *ScEnterRoom) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScEnterRoom.ProtoReflect.Descriptor instead.
func (*ScEnterRoom) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{19}
}

func (x *ScEnterRoom) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *ScEnterRoom) GetSeatInfoes() []*ScenterSeatInfo {
	if x != nil {
		return x.SeatInfoes
	}
	return nil
}

func (x *ScEnterRoom) GetRoomBase() int32 {
	if x != nil {
		return x.RoomBase
	}
	return 0
}

func (x *ScEnterRoom) GetGameConfig() string {
	if x != nil {
		return x.GameConfig
	}
	return ""
}

func (x *ScEnterRoom) GetGametype() string {
	if x != nil {
		return x.Gametype
	}
	return ""
}

func (x *ScEnterRoom) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *ScEnterRoom) GetRoomPwd() string {
	if x != nil {
		return x.RoomPwd
	}
	return ""
}

func (x *ScEnterRoom) GetCurrentRound() int32 {
	if x != nil {
		return x.CurrentRound
	}
	return 0
}

func (x *ScEnterRoom) GetOwnerSeat() int32 {
	if x != nil {
		return x.OwnerSeat
	}
	return 0
}

func (x *ScEnterRoom) GetCreaterId() int32 {
	if x != nil {
		return x.CreaterId
	}
	return 0
}

func (x *ScEnterRoom) GetCreaterType() string {
	if x != nil {
		return x.CreaterType
	}
	return ""
}

func (x *ScEnterRoom) GetDismissApply() bool {
	if x != nil {
		return x.DismissApply
	}
	return false
}

func (x *ScEnterRoom) GetDismissSecond() int32 {
	if x != nil {
		return x.DismissSecond
	}
	return 0
}

func (x *ScEnterRoom) GetDismissInfo() []*StDismissInfo {
	if x != nil {
		return x.DismissInfo
	}
	return nil
}

func (x *ScEnterRoom) GetShowActions() []int32 {
	if x != nil {
		return x.ShowActions
	}
	return nil
}

type ScEnterRoomNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatInfo *ScenterSeatInfo `protobuf:"bytes,2,opt,name=seat_info,json=seatInfo,proto3" json:"seat_info,omitempty"`
}

func (x *ScEnterRoomNotify) Reset() {
	*x = ScEnterRoomNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScEnterRoomNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScEnterRoomNotify) ProtoMessage() {}

func (x *ScEnterRoomNotify) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScEnterRoomNotify.ProtoReflect.Descriptor instead.
func (*ScEnterRoomNotify) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{20}
}

func (x *ScEnterRoomNotify) GetSeatInfo() *ScenterSeatInfo {
	if x != nil {
		return x.SeatInfo
	}
	return nil
}

type ScReadyGameFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason int32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"` // 0代表未知错误
}

func (x *ScReadyGameFailed) Reset() {
	*x = ScReadyGameFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScReadyGameFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScReadyGameFailed) ProtoMessage() {}

func (x *ScReadyGameFailed) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScReadyGameFailed.ProtoReflect.Descriptor instead.
func (*ScReadyGameFailed) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{21}
}

func (x *ScReadyGameFailed) GetReason() int32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type ScReadyGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScReadyGame) Reset() {
	*x = ScReadyGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScReadyGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScReadyGame) ProtoMessage() {}

func (x *ScReadyGame) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScReadyGame.ProtoReflect.Descriptor instead.
func (*ScReadyGame) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{22}
}

type ScReadyGameNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex int32 `protobuf:"varint,2,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
}

func (x *ScReadyGameNotify) Reset() {
	*x = ScReadyGameNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScReadyGameNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScReadyGameNotify) ProtoMessage() {}

func (x *ScReadyGameNotify) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScReadyGameNotify.ProtoReflect.Descriptor instead.
func (*ScReadyGameNotify) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{23}
}

func (x *ScReadyGameNotify) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

type ScLeaveRoomFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason int32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"` //0 代表未知错误
}

func (x *ScLeaveRoomFailed) Reset() {
	*x = ScLeaveRoomFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScLeaveRoomFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScLeaveRoomFailed) ProtoMessage() {}

func (x *ScLeaveRoomFailed) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScLeaveRoomFailed.ProtoReflect.Descriptor instead.
func (*ScLeaveRoomFailed) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{24}
}

func (x *ScLeaveRoomFailed) GetReason() int32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type ScLeaveRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Reason int32  `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Why    string `protobuf:"bytes,3,opt,name=why,proto3" json:"why,omitempty"`
}

func (x *ScLeaveRoom) Reset() {
	*x = ScLeaveRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScLeaveRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScLeaveRoom) ProtoMessage() {}

func (x *ScLeaveRoom) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScLeaveRoom.ProtoReflect.Descriptor instead.
func (*ScLeaveRoom) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{25}
}

func (x *ScLeaveRoom) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ScLeaveRoom) GetReason() int32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *ScLeaveRoom) GetWhy() string {
	if x != nil {
		return x.Why
	}
	return ""
}

type ScLeaveRoomNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex int32 `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
}

func (x *ScLeaveRoomNotify) Reset() {
	*x = ScLeaveRoomNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScLeaveRoomNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScLeaveRoomNotify) ProtoMessage() {}

func (x *ScLeaveRoomNotify) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScLeaveRoomNotify.ProtoReflect.Descriptor instead.
func (*ScLeaveRoomNotify) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{26}
}

func (x *ScLeaveRoomNotify) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

type SccomplexTile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Id      int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Ids     []int32 `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"` //因为有幺鸡代
	SubType int32   `protobuf:"varint,4,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
}

func (x *SccomplexTile) Reset() {
	*x = SccomplexTile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SccomplexTile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SccomplexTile) ProtoMessage() {}

func (x *SccomplexTile) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SccomplexTile.ProtoReflect.Descriptor instead.
func (*SccomplexTile) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{27}
}

func (x *SccomplexTile) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SccomplexTile) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SccomplexTile) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SccomplexTile) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

type AllSeqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex   int32   `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	TotalGold   int32   `protobuf:"varint,2,opt,name=total_gold,json=totalGold,proto3" json:"total_gold,omitempty"`
	MoneyChange int32   `protobuf:"varint,3,opt,name=money_change,json=moneyChange,proto3" json:"money_change,omitempty"`
	Pokers      []int32 `protobuf:"varint,4,rep,packed,name=pokers,proto3" json:"pokers,omitempty"`
}

func (x *AllSeqInfo) Reset() {
	*x = AllSeqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllSeqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllSeqInfo) ProtoMessage() {}

func (x *AllSeqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllSeqInfo.ProtoReflect.Descriptor instead.
func (*AllSeqInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{28}
}

func (x *AllSeqInfo) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *AllSeqInfo) GetTotalGold() int32 {
	if x != nil {
		return x.TotalGold
	}
	return 0
}

func (x *AllSeqInfo) GetMoneyChange() int32 {
	if x != nil {
		return x.MoneyChange
	}
	return 0
}

func (x *AllSeqInfo) GetPokers() []int32 {
	if x != nil {
		return x.Pokers
	}
	return nil
}

type OneJuSeqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqInfos []*AllSeqInfo `protobuf:"bytes,1,rep,name=seq_infos,json=seqInfos,proto3" json:"seq_infos,omitempty"`
	Liuju    bool          `protobuf:"varint,2,opt,name=liuju,proto3" json:"liuju,omitempty"`
}

func (x *OneJuSeqInfo) Reset() {
	*x = OneJuSeqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneJuSeqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneJuSeqInfo) ProtoMessage() {}

func (x *OneJuSeqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneJuSeqInfo.ProtoReflect.Descriptor instead.
func (*OneJuSeqInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{29}
}

func (x *OneJuSeqInfo) GetSeqInfos() []*AllSeqInfo {
	if x != nil {
		return x.SeqInfos
	}
	return nil
}

func (x *OneJuSeqInfo) GetLiuju() bool {
	if x != nil {
		return x.Liuju
	}
	return false
}

type ScEndGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqInfos       []*AllSeqInfo `protobuf:"bytes,1,rep,name=seq_infos,json=seqInfos,proto3" json:"seq_infos,omitempty"`
	Beishu         int32         `protobuf:"varint,2,opt,name=beishu,proto3" json:"beishu,omitempty"`
	Liuju          bool          `protobuf:"varint,3,opt,name=liuju,proto3" json:"liuju,omitempty"`
	CurrentRound   int32         `protobuf:"varint,4,opt,name=current_round,json=currentRound,proto3" json:"current_round,omitempty"`
	TotalRound     int32         `protobuf:"varint,5,opt,name=total_round,json=totalRound,proto3" json:"total_round,omitempty"`
	IsGameGroupEnd bool          `protobuf:"varint,6,opt,name=is_game_group_end,json=isGameGroupEnd,proto3" json:"is_game_group_end,omitempty"`
}

func (x *ScEndGame) Reset() {
	*x = ScEndGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScEndGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScEndGame) ProtoMessage() {}

func (x *ScEndGame) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScEndGame.ProtoReflect.Descriptor instead.
func (*ScEndGame) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{30}
}

func (x *ScEndGame) GetSeqInfos() []*AllSeqInfo {
	if x != nil {
		return x.SeqInfos
	}
	return nil
}

func (x *ScEndGame) GetBeishu() int32 {
	if x != nil {
		return x.Beishu
	}
	return 0
}

func (x *ScEndGame) GetLiuju() bool {
	if x != nil {
		return x.Liuju
	}
	return false
}

func (x *ScEndGame) GetCurrentRound() int32 {
	if x != nil {
		return x.CurrentRound
	}
	return 0
}

func (x *ScEndGame) GetTotalRound() int32 {
	if x != nil {
		return x.TotalRound
	}
	return 0
}

func (x *ScEndGame) GetIsGameGroupEnd() bool {
	if x != nil {
		return x.IsGameGroupEnd
	}
	return false
}

type ScEndGameGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSeqInfos        []*OneJuSeqInfo `protobuf:"bytes,1,rep,name=game_seq_infos,json=gameSeqInfos,proto3" json:"game_seq_infos,omitempty"`
	ConsumeCard         []int32         `protobuf:"varint,2,rep,packed,name=consume_card,json=consumeCard,proto3" json:"consume_card,omitempty"`                      //房卡消耗
	FirstRoundStartTime int32           `protobuf:"varint,3,opt,name=first_round_start_time,json=firstRoundStartTime,proto3" json:"first_round_start_time,omitempty"` //第一局开始时间
}

func (x *ScEndGameGroup) Reset() {
	*x = ScEndGameGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScEndGameGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScEndGameGroup) ProtoMessage() {}

func (x *ScEndGameGroup) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScEndGameGroup.ProtoReflect.Descriptor instead.
func (*ScEndGameGroup) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{31}
}

func (x *ScEndGameGroup) GetGameSeqInfos() []*OneJuSeqInfo {
	if x != nil {
		return x.GameSeqInfos
	}
	return nil
}

func (x *ScEndGameGroup) GetConsumeCard() []int32 {
	if x != nil {
		return x.ConsumeCard
	}
	return nil
}

func (x *ScEndGameGroup) GetFirstRoundStartTime() int32 {
	if x != nil {
		return x.FirstRoundStartTime
	}
	return 0
}

type ScGameActionFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Reason uint32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ScGameActionFailed) Reset() {
	*x = ScGameActionFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameActionFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameActionFailed) ProtoMessage() {}

func (x *ScGameActionFailed) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameActionFailed.ProtoReflect.Descriptor instead.
func (*ScGameActionFailed) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{32}
}

func (x *ScGameActionFailed) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScGameActionFailed) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type ScGameRefreshHandSeq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// seq为数字seq
	ActionId           int32            `protobuf:"varint,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	ActHandSeq         *StHandSeq       `protobuf:"bytes,2,opt,name=act_hand_seq,json=actHandSeq,proto3" json:"act_hand_seq,omitempty"`          //当前牌的seq
	ActComplexSeq      []*SccomplexTile `protobuf:"bytes,3,rep,name=act_complex_seq,json=actComplexSeq,proto3" json:"act_complex_seq,omitempty"` //复牌的seq
	ActChuedSeq        []int32          `protobuf:"varint,4,rep,packed,name=act_chued_seq,json=actChuedSeq,proto3" json:"act_chued_seq,omitempty"`
	LastChuedSeatIndex int32            `protobuf:"varint,5,opt,name=last_chued_seat_index,json=lastChuedSeatIndex,proto3" json:"last_chued_seat_index,omitempty"`
	BaiPai             []int32          `protobuf:"varint,6,rep,packed,name=bai_pai,json=baiPai,proto3" json:"bai_pai,omitempty"`
}

func (x *ScGameRefreshHandSeq) Reset() {
	*x = ScGameRefreshHandSeq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameRefreshHandSeq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameRefreshHandSeq) ProtoMessage() {}

func (x *ScGameRefreshHandSeq) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameRefreshHandSeq.ProtoReflect.Descriptor instead.
func (*ScGameRefreshHandSeq) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{33}
}

func (x *ScGameRefreshHandSeq) GetActionId() int32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *ScGameRefreshHandSeq) GetActHandSeq() *StHandSeq {
	if x != nil {
		return x.ActHandSeq
	}
	return nil
}

func (x *ScGameRefreshHandSeq) GetActComplexSeq() []*SccomplexTile {
	if x != nil {
		return x.ActComplexSeq
	}
	return nil
}

func (x *ScGameRefreshHandSeq) GetActChuedSeq() []int32 {
	if x != nil {
		return x.ActChuedSeq
	}
	return nil
}

func (x *ScGameRefreshHandSeq) GetLastChuedSeatIndex() int32 {
	if x != nil {
		return x.LastChuedSeatIndex
	}
	return 0
}

func (x *ScGameRefreshHandSeq) GetBaiPai() []int32 {
	if x != nil {
		return x.BaiPai
	}
	return nil
}

type StMoneyTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Person     int32 `protobuf:"varint,1,opt,name=person,proto3" json:"person,omitempty"` //seat_index, 5代表马
	Atm        int32 `protobuf:"varint,2,opt,name=atm,proto3" json:"atm,omitempty"`       //seat_index, 5代表马
	Money      int32 `protobuf:"varint,3,opt,name=money,proto3" json:"money,omitempty"`
	Transfer   int32 `protobuf:"varint,4,opt,name=transfer,proto3" json:"transfer,omitempty"`                       //转移给某人
	GangStatus int32 `protobuf:"varint,5,opt,name=gang_status,json=gangStatus,proto3" json:"gang_status,omitempty"` //1代表普通杠牌, 2代表前四杠牌, 3代表后四杠牌
}

func (x *StMoneyTransfer) Reset() {
	*x = StMoneyTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StMoneyTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StMoneyTransfer) ProtoMessage() {}

func (x *StMoneyTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StMoneyTransfer.ProtoReflect.Descriptor instead.
func (*StMoneyTransfer) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{34}
}

func (x *StMoneyTransfer) GetPerson() int32 {
	if x != nil {
		return x.Person
	}
	return 0
}

func (x *StMoneyTransfer) GetAtm() int32 {
	if x != nil {
		return x.Atm
	}
	return 0
}

func (x *StMoneyTransfer) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *StMoneyTransfer) GetTransfer() int32 {
	if x != nil {
		return x.Transfer
	}
	return 0
}

func (x *StMoneyTransfer) GetGangStatus() int32 {
	if x != nil {
		return x.GangStatus
	}
	return 0
}

type ScGameAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActId         uint32     `protobuf:"varint,1,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	ActReply      uint32     `protobuf:"varint,2,opt,name=act_reply,json=actReply,proto3" json:"act_reply,omitempty"`
	ActPokersType int32      `protobuf:"varint,3,opt,name=act_pokers_type,json=actPokersType,proto3" json:"act_pokers_type,omitempty"`
	Pokers        []int32    `protobuf:"varint,4,rep,packed,name=pokers,proto3" json:"pokers,omitempty"`
	ActedHandSeq  *StHandSeq `protobuf:"bytes,5,opt,name=acted_hand_seq,json=actedHandSeq,proto3" json:"acted_hand_seq,omitempty"`
	NextTurn      uint32     `protobuf:"varint,6,opt,name=next_turn,json=nextTurn,proto3" json:"next_turn,omitempty"`
}

func (x *ScGameAction) Reset() {
	*x = ScGameAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameAction) ProtoMessage() {}

func (x *ScGameAction) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameAction.ProtoReflect.Descriptor instead.
func (*ScGameAction) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{35}
}

func (x *ScGameAction) GetActId() uint32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *ScGameAction) GetActReply() uint32 {
	if x != nil {
		return x.ActReply
	}
	return 0
}

func (x *ScGameAction) GetActPokersType() int32 {
	if x != nil {
		return x.ActPokersType
	}
	return 0
}

func (x *ScGameAction) GetPokers() []int32 {
	if x != nil {
		return x.Pokers
	}
	return nil
}

func (x *ScGameAction) GetActedHandSeq() *StHandSeq {
	if x != nil {
		return x.ActedHandSeq
	}
	return nil
}

func (x *ScGameAction) GetNextTurn() uint32 {
	if x != nil {
		return x.NextTurn
	}
	return 0
}

type ScGameActionNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActId         uint32     `protobuf:"varint,1,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	ActReply      uint32     `protobuf:"varint,2,opt,name=act_reply,json=actReply,proto3" json:"act_reply,omitempty"`
	ActSeatIndex  int32      `protobuf:"varint,3,opt,name=act_seat_index,json=actSeatIndex,proto3" json:"act_seat_index,omitempty"`
	ActPokersType int32      `protobuf:"varint,4,opt,name=act_pokers_type,json=actPokersType,proto3" json:"act_pokers_type,omitempty"`
	Pokers        []int32    `protobuf:"varint,5,rep,packed,name=pokers,proto3" json:"pokers,omitempty"` //打出的牌
	ActedHandSeq  *StHandSeq `protobuf:"bytes,6,opt,name=acted_hand_seq,json=actedHandSeq,proto3" json:"acted_hand_seq,omitempty"`
	NextTurn      uint32     `protobuf:"varint,7,opt,name=next_turn,json=nextTurn,proto3" json:"next_turn,omitempty"`
}

func (x *ScGameActionNotify) Reset() {
	*x = ScGameActionNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameActionNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameActionNotify) ProtoMessage() {}

func (x *ScGameActionNotify) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameActionNotify.ProtoReflect.Descriptor instead.
func (*ScGameActionNotify) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{36}
}

func (x *ScGameActionNotify) GetActId() uint32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *ScGameActionNotify) GetActReply() uint32 {
	if x != nil {
		return x.ActReply
	}
	return 0
}

func (x *ScGameActionNotify) GetActSeatIndex() int32 {
	if x != nil {
		return x.ActSeatIndex
	}
	return 0
}

func (x *ScGameActionNotify) GetActPokersType() int32 {
	if x != nil {
		return x.ActPokersType
	}
	return 0
}

func (x *ScGameActionNotify) GetPokers() []int32 {
	if x != nil {
		return x.Pokers
	}
	return nil
}

func (x *ScGameActionNotify) GetActedHandSeq() *StHandSeq {
	if x != nil {
		return x.ActedHandSeq
	}
	return nil
}

func (x *ScGameActionNotify) GetNextTurn() uint32 {
	if x != nil {
		return x.NextTurn
	}
	return 0
}

type HandSeqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex int32      `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	HandSeq   *StHandSeq `protobuf:"bytes,2,opt,name=hand_seq,json=handSeq,proto3" json:"hand_seq,omitempty"`
	Mingpai   int32      `protobuf:"varint,3,opt,name=mingpai,proto3" json:"mingpai,omitempty"`
}

func (x *HandSeqInfo) Reset() {
	*x = HandSeqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandSeqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandSeqInfo) ProtoMessage() {}

func (x *HandSeqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandSeqInfo.ProtoReflect.Descriptor instead.
func (*HandSeqInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{37}
}

func (x *HandSeqInfo) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *HandSeqInfo) GetHandSeq() *StHandSeq {
	if x != nil {
		return x.HandSeq
	}
	return nil
}

func (x *HandSeqInfo) GetMingpai() int32 {
	if x != nil {
		return x.Mingpai
	}
	return 0
}

type ScStartGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherInfoes []*HandSeqInfo `protobuf:"bytes,1,rep,name=other_infoes,json=otherInfoes,proto3" json:"other_infoes,omitempty"`
	YouSeqInfo  *HandSeqInfo   `protobuf:"bytes,2,opt,name=you_seq_info,json=youSeqInfo,proto3" json:"you_seq_info,omitempty"`
	TilesRemain int32          `protobuf:"varint,3,opt,name=tiles_remain,json=tilesRemain,proto3" json:"tiles_remain,omitempty"`
	BankerSeat  int32          `protobuf:"varint,4,opt,name=banker_seat,json=bankerSeat,proto3" json:"banker_seat,omitempty"`
}

func (x *ScStartGame) Reset() {
	*x = ScStartGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScStartGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScStartGame) ProtoMessage() {}

func (x *ScStartGame) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScStartGame.ProtoReflect.Descriptor instead.
func (*ScStartGame) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{38}
}

func (x *ScStartGame) GetOtherInfoes() []*HandSeqInfo {
	if x != nil {
		return x.OtherInfoes
	}
	return nil
}

func (x *ScStartGame) GetYouSeqInfo() *HandSeqInfo {
	if x != nil {
		return x.YouSeqInfo
	}
	return nil
}

func (x *ScStartGame) GetTilesRemain() int32 {
	if x != nil {
		return x.TilesRemain
	}
	return 0
}

func (x *ScStartGame) GetBankerSeat() int32 {
	if x != nil {
		return x.BankerSeat
	}
	return 0
}

type ScGameShowActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout     int32   `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ShowActions []int32 `protobuf:"varint,2,rep,packed,name=show_actions,json=showActions,proto3" json:"show_actions,omitempty"`
}

func (x *ScGameShowActions) Reset() {
	*x = ScGameShowActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameShowActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameShowActions) ProtoMessage() {}

func (x *ScGameShowActions) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameShowActions.ProtoReflect.Descriptor instead.
func (*ScGameShowActions) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{39}
}

func (x *ScGameShowActions) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ScGameShowActions) GetShowActions() []int32 {
	if x != nil {
		return x.ShowActions
	}
	return nil
}

type ScSureLack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout int32 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ScSureLack) Reset() {
	*x = ScSureLack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSureLack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSureLack) ProtoMessage() {}

func (x *ScSureLack) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSureLack.ProtoReflect.Descriptor instead.
func (*ScSureLack) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{40}
}

func (x *ScSureLack) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type ScReadyTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout int32 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ScReadyTimer) Reset() {
	*x = ScReadyTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScReadyTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScReadyTimer) ProtoMessage() {}

func (x *ScReadyTimer) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScReadyTimer.ProtoReflect.Descriptor instead.
func (*ScReadyTimer) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{41}
}

func (x *ScReadyTimer) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type ScGameTurn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout     int32   `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ShowActions []int32 `protobuf:"varint,2,rep,packed,name=show_actions,json=showActions,proto3" json:"show_actions,omitempty"`
}

func (x *ScGameTurn) Reset() {
	*x = ScGameTurn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameTurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameTurn) ProtoMessage() {}

func (x *ScGameTurn) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameTurn.ProtoReflect.Descriptor instead.
func (*ScGameTurn) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{42}
}

func (x *ScGameTurn) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ScGameTurn) GetShowActions() []int32 {
	if x != nil {
		return x.ShowActions
	}
	return nil
}

type ScGameTurnNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout   int32 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	SeatIndex int32 `protobuf:"varint,2,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
}

func (x *ScGameTurnNotify) Reset() {
	*x = ScGameTurnNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameTurnNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameTurnNotify) ProtoMessage() {}

func (x *ScGameTurnNotify) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameTurnNotify.ProtoReflect.Descriptor instead.
func (*ScGameTurnNotify) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{43}
}

func (x *ScGameTurnNotify) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ScGameTurnNotify) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

type ScBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ScBroadcast) Reset() {
	*x = ScBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScBroadcast) ProtoMessage() {}

func (x *ScBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScBroadcast.ProtoReflect.Descriptor instead.
func (*ScBroadcast) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{44}
}

func (x *ScBroadcast) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ScSureExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout int32 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ScSureExchange) Reset() {
	*x = ScSureExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSureExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSureExchange) ProtoMessage() {}

func (x *ScSureExchange) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSureExchange.ProtoReflect.Descriptor instead.
func (*ScSureExchange) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{45}
}

func (x *ScSureExchange) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type ScExchangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeOut    []int32      `protobuf:"varint,1,rep,packed,name=exchange_out,json=exchangeOut,proto3" json:"exchange_out,omitempty"`
	ExchangeIn     []int32      `protobuf:"varint,2,rep,packed,name=exchange_in,json=exchangeIn,proto3" json:"exchange_in,omitempty"`
	Maipai         []bool       `protobuf:"varint,3,rep,packed,name=maipai,proto3" json:"maipai,omitempty"`
	ExchangeType   int32        `protobuf:"varint,4,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type,omitempty"`
	YouSeqInfo     *HandSeqInfo `protobuf:"bytes,5,opt,name=you_seq_info,json=youSeqInfo,proto3" json:"you_seq_info,omitempty"`
	ExchangeInSeat int32        `protobuf:"varint,6,opt,name=exchange_in_seat,json=exchangeInSeat,proto3" json:"exchange_in_seat,omitempty"`
}

func (x *ScExchangeInfo) Reset() {
	*x = ScExchangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScExchangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScExchangeInfo) ProtoMessage() {}

func (x *ScExchangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScExchangeInfo.ProtoReflect.Descriptor instead.
func (*ScExchangeInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{46}
}

func (x *ScExchangeInfo) GetExchangeOut() []int32 {
	if x != nil {
		return x.ExchangeOut
	}
	return nil
}

func (x *ScExchangeInfo) GetExchangeIn() []int32 {
	if x != nil {
		return x.ExchangeIn
	}
	return nil
}

func (x *ScExchangeInfo) GetMaipai() []bool {
	if x != nil {
		return x.Maipai
	}
	return nil
}

func (x *ScExchangeInfo) GetExchangeType() int32 {
	if x != nil {
		return x.ExchangeType
	}
	return 0
}

func (x *ScExchangeInfo) GetYouSeqInfo() *HandSeqInfo {
	if x != nil {
		return x.YouSeqInfo
	}
	return nil
}

func (x *ScExchangeInfo) GetExchangeInSeat() int32 {
	if x != nil {
		return x.ExchangeInSeat
	}
	return 0
}

type ScExchangeTilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      bool         `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	YouSeqInfo  *HandSeqInfo `protobuf:"bytes,2,opt,name=you_seq_info,json=youSeqInfo,proto3" json:"you_seq_info,omitempty"`
	ExchangeOut []int32      `protobuf:"varint,3,rep,packed,name=exchange_out,json=exchangeOut,proto3" json:"exchange_out,omitempty"`
}

func (x *ScExchangeTilesResponse) Reset() {
	*x = ScExchangeTilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScExchangeTilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScExchangeTilesResponse) ProtoMessage() {}

func (x *ScExchangeTilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScExchangeTilesResponse.ProtoReflect.Descriptor instead.
func (*ScExchangeTilesResponse) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{47}
}

func (x *ScExchangeTilesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ScExchangeTilesResponse) GetYouSeqInfo() *HandSeqInfo {
	if x != nil {
		return x.YouSeqInfo
	}
	return nil
}

func (x *ScExchangeTilesResponse) GetExchangeOut() []int32 {
	if x != nil {
		return x.ExchangeOut
	}
	return nil
}

type ScGiftAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendSeat    int32 `protobuf:"varint,1,opt,name=send_seat,json=sendSeat,proto3" json:"send_seat,omitempty"`
	ReceiveSeat int32 `protobuf:"varint,2,opt,name=receive_seat,json=receiveSeat,proto3" json:"receive_seat,omitempty"`
	GiftId      int32 `protobuf:"varint,3,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`
}

func (x *ScGiftAction) Reset() {
	*x = ScGiftAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGiftAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGiftAction) ProtoMessage() {}

func (x *ScGiftAction) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGiftAction.ProtoReflect.Descriptor instead.
func (*ScGiftAction) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{48}
}

func (x *ScGiftAction) GetSendSeat() int32 {
	if x != nil {
		return x.SendSeat
	}
	return 0
}

func (x *ScGiftAction) GetReceiveSeat() int32 {
	if x != nil {
		return x.ReceiveSeat
	}
	return 0
}

func (x *ScGiftAction) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

type ScSeatVoiceid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voiceid []int32 `protobuf:"varint,1,rep,packed,name=voiceid,proto3" json:"voiceid,omitempty"`
}

func (x *ScSeatVoiceid) Reset() {
	*x = ScSeatVoiceid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSeatVoiceid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSeatVoiceid) ProtoMessage() {}

func (x *ScSeatVoiceid) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSeatVoiceid.ProtoReflect.Descriptor instead.
func (*ScSeatVoiceid) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{49}
}

func (x *ScSeatVoiceid) GetVoiceid() []int32 {
	if x != nil {
		return x.Voiceid
	}
	return nil
}

type ScseatEndGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZiMoTimes     int32 `protobuf:"varint,1,opt,name=zi_mo_times,json=ziMoTimes,proto3" json:"zi_mo_times,omitempty"`
	JiePaoTimes   int32 `protobuf:"varint,2,opt,name=jie_pao_times,json=jiePaoTimes,proto3" json:"jie_pao_times,omitempty"`
	DianPaoTimes  int32 `protobuf:"varint,3,opt,name=dian_pao_times,json=dianPaoTimes,proto3" json:"dian_pao_times,omitempty"`
	AnGangTimes   int32 `protobuf:"varint,4,opt,name=an_gang_times,json=anGangTimes,proto3" json:"an_gang_times,omitempty"`
	MingGangTimes int32 `protobuf:"varint,5,opt,name=ming_gang_times,json=mingGangTimes,proto3" json:"ming_gang_times,omitempty"`
	TotalScore    int32 `protobuf:"varint,6,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	ConsumeCard   int32 `protobuf:"varint,7,opt,name=consume_card,json=consumeCard,proto3" json:"consume_card,omitempty"`
	IsBigWinner   bool  `protobuf:"varint,8,opt,name=is_big_winner,json=isBigWinner,proto3" json:"is_big_winner,omitempty"`
}

func (x *ScseatEndGroupInfo) Reset() {
	*x = ScseatEndGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScseatEndGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScseatEndGroupInfo) ProtoMessage() {}

func (x *ScseatEndGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScseatEndGroupInfo.ProtoReflect.Descriptor instead.
func (*ScseatEndGroupInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{50}
}

func (x *ScseatEndGroupInfo) GetZiMoTimes() int32 {
	if x != nil {
		return x.ZiMoTimes
	}
	return 0
}

func (x *ScseatEndGroupInfo) GetJiePaoTimes() int32 {
	if x != nil {
		return x.JiePaoTimes
	}
	return 0
}

func (x *ScseatEndGroupInfo) GetDianPaoTimes() int32 {
	if x != nil {
		return x.DianPaoTimes
	}
	return 0
}

func (x *ScseatEndGroupInfo) GetAnGangTimes() int32 {
	if x != nil {
		return x.AnGangTimes
	}
	return 0
}

func (x *ScseatEndGroupInfo) GetMingGangTimes() int32 {
	if x != nil {
		return x.MingGangTimes
	}
	return 0
}

func (x *ScseatEndGroupInfo) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *ScseatEndGroupInfo) GetConsumeCard() int32 {
	if x != nil {
		return x.ConsumeCard
	}
	return 0
}

func (x *ScseatEndGroupInfo) GetIsBigWinner() bool {
	if x != nil {
		return x.IsBigWinner
	}
	return false
}

type ScEndGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatInfoes []*ScseatEndGroupInfo `protobuf:"bytes,1,rep,name=seat_infoes,json=seatInfoes,proto3" json:"seat_infoes,omitempty"`
}

func (x *ScEndGroupInfo) Reset() {
	*x = ScEndGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScEndGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScEndGroupInfo) ProtoMessage() {}

func (x *ScEndGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScEndGroupInfo.ProtoReflect.Descriptor instead.
func (*ScEndGroupInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{51}
}

func (x *ScEndGroupInfo) GetSeatInfoes() []*ScseatEndGroupInfo {
	if x != nil {
		return x.SeatInfoes
	}
	return nil
}

type ScSurePiao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout int32 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ScSurePiao) Reset() {
	*x = ScSurePiao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSurePiao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSurePiao) ProtoMessage() {}

func (x *ScSurePiao) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSurePiao.ProtoReflect.Descriptor instead.
func (*ScSurePiao) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{52}
}

func (x *ScSurePiao) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type ScPiaoInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatPiaoInfo []int32 `protobuf:"varint,1,rep,packed,name=seat_piao_info,json=seatPiaoInfo,proto3" json:"seat_piao_info,omitempty"`
}

func (x *ScPiaoInfos) Reset() {
	*x = ScPiaoInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScPiaoInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScPiaoInfos) ProtoMessage() {}

func (x *ScPiaoInfos) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScPiaoInfos.ProtoReflect.Descriptor instead.
func (*ScPiaoInfos) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{53}
}

func (x *ScPiaoInfos) GetSeatPiaoInfo() []int32 {
	if x != nil {
		return x.SeatPiaoInfo
	}
	return nil
}

type SeatGpsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex  int32  `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	Coordinate string `protobuf:"bytes,2,opt,name=coordinate,proto3" json:"coordinate,omitempty"`
	Address    string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *SeatGpsInfo) Reset() {
	*x = SeatGpsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatGpsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatGpsInfo) ProtoMessage() {}

func (x *SeatGpsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatGpsInfo.ProtoReflect.Descriptor instead.
func (*SeatGpsInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{54}
}

func (x *SeatGpsInfo) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *SeatGpsInfo) GetCoordinate() string {
	if x != nil {
		return x.Coordinate
	}
	return ""
}

func (x *SeatGpsInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ScRoomGpsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpsInfoes []*SeatGpsInfo `protobuf:"bytes,1,rep,name=gps_infoes,json=gpsInfoes,proto3" json:"gps_infoes,omitempty"`
}

func (x *ScRoomGpsInfo) Reset() {
	*x = ScRoomGpsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScRoomGpsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScRoomGpsInfo) ProtoMessage() {}

func (x *ScRoomGpsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScRoomGpsInfo.ProtoReflect.Descriptor instead.
func (*ScRoomGpsInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{55}
}

func (x *ScRoomGpsInfo) GetGpsInfoes() []*SeatGpsInfo {
	if x != nil {
		return x.GpsInfoes
	}
	return nil
}

type ScDizhuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DizhuSeat   int32      `protobuf:"varint,1,opt,name=dizhu_seat,json=dizhuSeat,proto3" json:"dizhu_seat,omitempty"`
	DizhuPokers []int32    `protobuf:"varint,2,rep,packed,name=dizhu_pokers,json=dizhuPokers,proto3" json:"dizhu_pokers,omitempty"`
	HandSeq     *StHandSeq `protobuf:"bytes,3,opt,name=hand_seq,json=handSeq,proto3" json:"hand_seq,omitempty"`
}

func (x *ScDizhuInfo) Reset() {
	*x = ScDizhuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScDizhuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScDizhuInfo) ProtoMessage() {}

func (x *ScDizhuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScDizhuInfo.ProtoReflect.Descriptor instead.
func (*ScDizhuInfo) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{56}
}

func (x *ScDizhuInfo) GetDizhuSeat() int32 {
	if x != nil {
		return x.DizhuSeat
	}
	return 0
}

func (x *ScDizhuInfo) GetDizhuPokers() []int32 {
	if x != nil {
		return x.DizhuPokers
	}
	return nil
}

func (x *ScDizhuInfo) GetHandSeq() *StHandSeq {
	if x != nil {
		return x.HandSeq
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
type CsInspectPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid int64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CsInspectPlayer) Reset() {
	*x = CsInspectPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsInspectPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsInspectPlayer) ProtoMessage() {}

func (x *CsInspectPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsInspectPlayer.ProtoReflect.Descriptor instead.
func (*CsInspectPlayer) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{57}
}

func (x *CsInspectPlayer) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type ScInspectPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      int64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
}

func (x *ScInspectPlayer) Reset() {
	*x = ScInspectPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScInspectPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScInspectPlayer) ProtoMessage() {}

func (x *ScInspectPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScInspectPlayer.ProtoReflect.Descriptor instead.
func (*ScInspectPlayer) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{58}
}

func (x *ScInspectPlayer) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *ScInspectPlayer) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

type CsDismissRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` //1申请解散, 2同意，3拒绝
}

func (x *CsDismissRoom) Reset() {
	*x = CsDismissRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsDismissRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsDismissRoom) ProtoMessage() {}

func (x *CsDismissRoom) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsDismissRoom.ProtoReflect.Descriptor instead.
func (*CsDismissRoom) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{59}
}

func (x *CsDismissRoom) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ScDismissRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` //1申请解散成功, 2同意成功，3拒绝成功
	Time int32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ScDismissRoom) Reset() {
	*x = ScDismissRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScDismissRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScDismissRoom) ProtoMessage() {}

func (x *ScDismissRoom) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScDismissRoom.ProtoReflect.Descriptor instead.
func (*ScDismissRoom) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{60}
}

func (x *ScDismissRoom) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ScDismissRoom) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type ScDismissRoomResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  int32   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` //0成功, 1失败
	OpSeats []int32 `protobuf:"varint,2,rep,packed,name=op_seats,json=opSeats,proto3" json:"op_seats,omitempty"`
}

func (x *ScDismissRoomResult) Reset() {
	*x = ScDismissRoomResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScDismissRoomResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScDismissRoomResult) ProtoMessage() {}

func (x *ScDismissRoomResult) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScDismissRoomResult.ProtoReflect.Descriptor instead.
func (*ScDismissRoomResult) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{61}
}

func (x *ScDismissRoomResult) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ScDismissRoomResult) GetOpSeats() []int32 {
	if x != nil {
		return x.OpSeats
	}
	return nil
}

type ScDismissRoomNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex int32 `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	Type      int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Time      int32 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ScDismissRoomNotify) Reset() {
	*x = ScDismissRoomNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScDismissRoomNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScDismissRoomNotify) ProtoMessage() {}

func (x *ScDismissRoomNotify) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScDismissRoomNotify.ProtoReflect.Descriptor instead.
func (*ScDismissRoomNotify) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{62}
}

func (x *ScDismissRoomNotify) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *ScDismissRoomNotify) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ScDismissRoomNotify) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type ScQianSiEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScQianSiEnd) Reset() {
	*x = ScQianSiEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScQianSiEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScQianSiEnd) ProtoMessage() {}

func (x *ScQianSiEnd) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScQianSiEnd.ProtoReflect.Descriptor instead.
func (*ScQianSiEnd) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{63}
}

type ScSureAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seat     int32 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	ActionId int32 `protobuf:"varint,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *ScSureAction) Reset() {
	*x = ScSureAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScSureAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScSureAction) ProtoMessage() {}

func (x *ScSureAction) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScSureAction.ProtoReflect.Descriptor instead.
func (*ScSureAction) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{64}
}

func (x *ScSureAction) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *ScSureAction) GetActionId() int32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

////////////////////////////////////////////////////////////////////////////////
type CsAddBot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CsAddBot) Reset() {
	*x = CsAddBot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsAddBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsAddBot) ProtoMessage() {}

func (x *CsAddBot) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsAddBot.ProtoReflect.Descriptor instead.
func (*CsAddBot) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{65}
}

func (x *CsAddBot) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CsDebugDismissRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CsDebugDismissRoom) Reset() {
	*x = CsDebugDismissRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsDebugDismissRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsDebugDismissRoom) ProtoMessage() {}

func (x *CsDebugDismissRoom) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsDebugDismissRoom.ProtoReflect.Descriptor instead.
func (*CsDebugDismissRoom) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{66}
}

type CsDebugRunAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CsDebugRunAction) Reset() {
	*x = CsDebugRunAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsDebugRunAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsDebugRunAction) ProtoMessage() {}

func (x *CsDebugRunAction) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsDebugRunAction.ProtoReflect.Descriptor instead.
func (*CsDebugRunAction) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{67}
}

type CsGameAuto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CsGameAuto) Reset() {
	*x = CsGameAuto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsGameAuto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsGameAuto) ProtoMessage() {}

func (x *CsGameAuto) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsGameAuto.ProtoReflect.Descriptor instead.
func (*CsGameAuto) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{68}
}

type ScGameAuto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auto bool `protobuf:"varint,1,opt,name=auto,proto3" json:"auto,omitempty"`
}

func (x *ScGameAuto) Reset() {
	*x = ScGameAuto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameAuto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameAuto) ProtoMessage() {}

func (x *ScGameAuto) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameAuto.ProtoReflect.Descriptor instead.
func (*ScGameAuto) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{69}
}

func (x *ScGameAuto) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

type ScGameAutoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex int32 `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	Auto      bool  `protobuf:"varint,2,opt,name=auto,proto3" json:"auto,omitempty"`
}

func (x *ScGameAutoNotify) Reset() {
	*x = ScGameAutoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameAutoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameAutoNotify) ProtoMessage() {}

func (x *ScGameAutoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameAutoNotify.ProtoReflect.Descriptor instead.
func (*ScGameAutoNotify) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{70}
}

func (x *ScGameAutoNotify) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *ScGameAutoNotify) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

type CsGameManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CsGameManual) Reset() {
	*x = CsGameManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsGameManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsGameManual) ProtoMessage() {}

func (x *CsGameManual) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsGameManual.ProtoReflect.Descriptor instead.
func (*CsGameManual) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{71}
}

type CsResendAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CsResendAction) Reset() {
	*x = CsResendAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsResendAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsResendAction) ProtoMessage() {}

func (x *CsResendAction) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsResendAction.ProtoReflect.Descriptor instead.
func (*CsResendAction) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{72}
}

type CsChangeOnline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online bool `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *CsChangeOnline) Reset() {
	*x = CsChangeOnline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsChangeOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsChangeOnline) ProtoMessage() {}

func (x *CsChangeOnline) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsChangeOnline.ProtoReflect.Descriptor instead.
func (*CsChangeOnline) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{73}
}

func (x *CsChangeOnline) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

////////////////////////匹配房间
type CsMatchGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CsMatchGame) Reset() {
	*x = CsMatchGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsMatchGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsMatchGame) ProtoMessage() {}

func (x *CsMatchGame) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsMatchGame.ProtoReflect.Descriptor instead.
func (*CsMatchGame) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{74}
}

type CsReadyMatchGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CsReadyMatchGame) Reset() {
	*x = CsReadyMatchGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsReadyMatchGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsReadyMatchGame) ProtoMessage() {}

func (x *CsReadyMatchGame) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsReadyMatchGame.ProtoReflect.Descriptor instead.
func (*CsReadyMatchGame) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{75}
}

type ScEnterMatchRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScEnterMatchRoom) Reset() {
	*x = ScEnterMatchRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScEnterMatchRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScEnterMatchRoom) ProtoMessage() {}

func (x *ScEnterMatchRoom) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScEnterMatchRoom.ProtoReflect.Descriptor instead.
func (*ScEnterMatchRoom) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{76}
}

type CsGameRefreshSeq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CsGameRefreshSeq) Reset() {
	*x = CsGameRefreshSeq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsGameRefreshSeq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsGameRefreshSeq) ProtoMessage() {}

func (x *CsGameRefreshSeq) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsGameRefreshSeq.ProtoReflect.Descriptor instead.
func (*CsGameRefreshSeq) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{77}
}

// Chat
type CsChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex int32  `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgType   int32  `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
}

func (x *CsChat) Reset() {
	*x = CsChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsChat) ProtoMessage() {}

func (x *CsChat) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsChat.ProtoReflect.Descriptor instead.
func (*CsChat) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{78}
}

func (x *CsChat) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *CsChat) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CsChat) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

// 玩家掉线
type ScChangeOnline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex int32 `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`
	Online    bool  `protobuf:"varint,2,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *ScChangeOnline) Reset() {
	*x = ScChangeOnline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScChangeOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScChangeOnline) ProtoMessage() {}

func (x *ScChangeOnline) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScChangeOnline.ProtoReflect.Descriptor instead.
func (*ScChangeOnline) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{79}
}

func (x *ScChangeOnline) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *ScChangeOnline) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

type CsGiftAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveSeat int32 `protobuf:"varint,1,opt,name=receive_seat,json=receiveSeat,proto3" json:"receive_seat,omitempty"`
	GiftId      int32 `protobuf:"varint,2,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`
}

func (x *CsGiftAction) Reset() {
	*x = CsGiftAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsGiftAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsGiftAction) ProtoMessage() {}

func (x *CsGiftAction) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsGiftAction.ProtoReflect.Descriptor instead.
func (*CsGiftAction) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{80}
}

func (x *CsGiftAction) GetReceiveSeat() int32 {
	if x != nil {
		return x.ReceiveSeat
	}
	return 0
}

func (x *CsGiftAction) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

type CsSubmitVoiceid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voiceid int32 `protobuf:"varint,1,opt,name=voiceid,proto3" json:"voiceid,omitempty"`
}

func (x *CsSubmitVoiceid) Reset() {
	*x = CsSubmitVoiceid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsSubmitVoiceid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsSubmitVoiceid) ProtoMessage() {}

func (x *CsSubmitVoiceid) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsSubmitVoiceid.ProtoReflect.Descriptor instead.
func (*CsSubmitVoiceid) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{81}
}

func (x *CsSubmitVoiceid) GetVoiceid() int32 {
	if x != nil {
		return x.Voiceid
	}
	return 0
}

type CsSeatGps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinate string `protobuf:"bytes,1,opt,name=coordinate,proto3" json:"coordinate,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CsSeatGps) Reset() {
	*x = CsSeatGps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameserver_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsSeatGps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsSeatGps) ProtoMessage() {}

func (x *CsSeatGps) ProtoReflect() protoreflect.Message {
	mi := &file_gameserver_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsSeatGps.ProtoReflect.Descriptor instead.
func (*CsSeatGps) Descriptor() ([]byte, []int) {
	return file_gameserver_proto_rawDescGZIP(), []int{82}
}

func (x *CsSeatGps) GetCoordinate() string {
	if x != nil {
		return x.Coordinate
	}
	return ""
}

func (x *CsSeatGps) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

var File_gameserver_proto protoreflect.FileDescriptor

var file_gameserver_proto_rawDesc = []byte{
	0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x16,
	0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x10,
	0x73, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x04, 0x70, 0x61, 0x63, 0x6b, 0x22, 0x0b, 0x0a, 0x09, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x22, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc3, 0x01, 0x0a,
	0x0a, 0x73, 0x74, 0x5f, 0x68, 0x75, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x31, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x67, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66,
	0x4d, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x66, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0c, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x75, 0x5f, 0x73, 0x65, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x48, 0x75, 0x53, 0x65,
	0x61, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x73, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x69,
	0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd6, 0x02, 0x0a, 0x0d, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x67, 0x6f, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x6f, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x3f, 0x0a, 0x0b, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x22, 0xef, 0x04, 0x0a, 0x14, 0x73, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x63, 0x6b, 0x12,
	0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x68, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x69, 0x73, 0x48, 0x75, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x75, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x68, 0x75, 0x53, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x68,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08,
	0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x71,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x73, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74, 0x69, 0x6c,
	0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x71, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x68, 0x75, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x68, 0x75, 0x65, 0x64, 0x53, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x07, 0x68, 0x75,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x5f, 0x68, 0x75, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x52, 0x06, 0x68, 0x75, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x62, 0x61, 0x6f, 0x6a, 0x69, 0x61, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x42, 0x61, 0x6f, 0x6a, 0x69, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x61, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x69, 0x61, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x69, 0x5f, 0x70, 0x61, 0x69,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x62, 0x61, 0x69, 0x50, 0x61, 0x69, 0x12, 0x23,
	0x0a, 0x0e, 0x62, 0x61, 0x69, 0x5f, 0x70, 0x61, 0x69, 0x5f, 0x68, 0x75, 0x5f, 0x73, 0x65, 0x71,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x69, 0x50, 0x61, 0x69, 0x48, 0x75,
	0x53, 0x65, 0x71, 0x22, 0x29, 0x0a, 0x0d, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x69, 0x22, 0x21,
	0x0a, 0x0d, 0x63, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x77, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x68,
	0x79, 0x22, 0x52, 0x0a, 0x0e, 0x63, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x41, 0x0a, 0x0c, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x63, 0x6b, 0x22, 0x3f, 0x0a, 0x0d, 0x73, 0x63, 0x5f, 0x6c,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x22, 0xa4, 0x07, 0x0a, 0x10, 0x73, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61,
	0x63, 0x6b, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x75, 0x72, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x75, 0x72, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x68, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x68, 0x69,
	0x6e, 0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x63,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x70,
	0x77, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x50, 0x77,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x75, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x14,
	0x73, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x22, 0xae, 0x04, 0x0a, 0x0d, 0x73, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x70, 0x77, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x50, 0x77, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3e,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x52, 0x0a, 0x14, 0x73, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x61,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x14, 0x73, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x73, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x14, 0x73, 0x63, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x2e, 0x0a,
	0x14, 0x73, 0x63, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x51, 0x0a,
	0x0d, 0x73, 0x63, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x77, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x68, 0x79,
	0x22, 0x35, 0x0a, 0x14, 0x73, 0x63, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65,
	0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x61, 0x0a, 0x0e, 0x73, 0x63, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x06,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x5f,
	0x6a, 0x75, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x73,
	0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x71, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x75, 0x6a, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6c, 0x69, 0x75, 0x6a, 0x75, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x73, 0x63, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x71,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x65, 0x69, 0x73, 0x68, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x62, 0x65, 0x69, 0x73, 0x68, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x75, 0x6a, 0x75,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x69, 0x75, 0x6a, 0x75, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x22, 0xae,
	0x01, 0x0a, 0x11, 0x73, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x41, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x71,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x65, 0x5f, 0x6a, 0x75,
	0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x3f, 0x0a, 0x15, 0x73, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0xaa, 0x02, 0x0a, 0x18, 0x73, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x48, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x5f, 0x63, 0x68, 0x75, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x43, 0x68, 0x75, 0x65, 0x64, 0x53, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x65, 0x64, 0x53, 0x65, 0x61, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x69, 0x5f, 0x70, 0x61, 0x69, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x62, 0x61, 0x69, 0x50, 0x61, 0x69, 0x22, 0x90, 0x01,
	0x0a, 0x11, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x74, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x74, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xe4, 0x01, 0x0a, 0x0e, 0x73, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x5f, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x06, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x15, 0x73, 0x63, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x63, 0x74, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x3d, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65,
	0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x71, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x22, 0x7c, 0x0a, 0x0d, 0x68,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x08, 0x68,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x69, 0x22, 0xce, 0x01, 0x0a, 0x0d, 0x73, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x68,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x79, 0x6f, 0x75,
	0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x68, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x79, 0x6f, 0x75, 0x53,
	0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x22, 0x53, 0x0a, 0x14, 0x73, 0x63,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x28, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x61, 0x63, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x2a, 0x0a, 0x0e, 0x73, 0x63, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x4b, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x4e, 0x0a, 0x13, 0x73, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x20, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x2c, 0x0a, 0x10, 0x73, 0x63, 0x5f, 0x73, 0x75, 0x72, 0x65, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x73, 0x63, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x69, 0x70, 0x61, 0x69, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x69,
	0x70, 0x61, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x79, 0x6f, 0x75, 0x5f,
	0x73, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x68, 0x61, 0x6e, 0x64,
	0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x79, 0x6f, 0x75, 0x53, 0x65,
	0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x22,
	0x94, 0x01, 0x0a, 0x1a, 0x73, 0x63, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x79, 0x6f, 0x75, 0x5f, 0x73, 0x65,
	0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x79, 0x6f, 0x75, 0x53, 0x65, 0x71, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x22, 0x69, 0x0a, 0x0e, 0x73, 0x63, 0x5f, 0x67, 0x69, 0x66,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x53, 0x65, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49,
	0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x69, 0x64, 0x22, 0xb5,
	0x02, 0x0a, 0x15, 0x73, 0x63, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0b, 0x7a, 0x69, 0x5f, 0x6d,
	0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x7a,
	0x69, 0x4d, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6a, 0x69, 0x65, 0x5f,
	0x70, 0x61, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6a, 0x69, 0x65, 0x50, 0x61, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x61, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6e, 0x5f, 0x67, 0x61, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x6e, 0x47, 0x61, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x67,
	0x61, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x69, 0x67,
	0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x11, 0x73, 0x63, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0b, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x63,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x65, 0x73, 0x22,
	0x28, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x69, 0x61, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x35, 0x0a, 0x0d, 0x73, 0x63, 0x5f,
	0x70, 0x69, 0x61, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65,
	0x61, 0x74, 0x5f, 0x70, 0x69, 0x61, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x74, 0x50, 0x69, 0x61, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x68, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4c, 0x0a, 0x10, 0x73, 0x63,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38,
	0x0a, 0x0a, 0x67, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67,
	0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x73, 0x63, 0x5f,
	0x64, 0x69, 0x7a, 0x68, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69,
	0x7a, 0x68, 0x75, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x69, 0x7a, 0x68, 0x75, 0x53, 0x65, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x69, 0x7a,
	0x68, 0x75, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x7a, 0x68, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x32, 0x0a, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x52, 0x07, 0x68, 0x61, 0x6e,
	0x64, 0x53, 0x65, 0x71, 0x22, 0x25, 0x0a, 0x11, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x11, 0x73,
	0x63, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x25, 0x0a, 0x0f, 0x63, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x0f, 0x73, 0x63, 0x5f, 0x64, 0x69, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x4b, 0x0a, 0x16, 0x73, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x70, 0x53, 0x65, 0x61, 0x74, 0x73, 0x22, 0x5f,
	0x0a, 0x16, 0x73, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65,
	0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x10, 0x0a, 0x0e, 0x73, 0x63, 0x5f, 0x71, 0x69, 0x61, 0x6e, 0x5f, 0x73, 0x69, 0x5f, 0x65, 0x6e,
	0x64, 0x22, 0x41, 0x0a, 0x0e, 0x73, 0x63, 0x5f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x0a, 0x63, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x62,
	0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x63, 0x73, 0x5f, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x22, 0x15, 0x0a, 0x13, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0e, 0x0a, 0x0c, 0x63, 0x73, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x13,
	0x73, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x63, 0x73, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0x12, 0x0a, 0x10, 0x63, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x10,
	0x63, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x63, 0x73, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x63, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x22, 0x15, 0x0a, 0x13, 0x73, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x15, 0x0a, 0x13, 0x63, 0x73, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x22, 0x55,
	0x0a, 0x07, 0x63, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x10, 0x73, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0x4c, 0x0a, 0x0e, 0x63, 0x73, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x22, 0x2d,
	0x0a, 0x11, 0x63, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x69, 0x64, 0x22, 0x47, 0x0a,
	0x0b, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x67, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gameserver_proto_rawDescOnce sync.Once
	file_gameserver_proto_rawDescData = file_gameserver_proto_rawDesc
)

func file_gameserver_proto_rawDescGZIP() []byte {
	file_gameserver_proto_rawDescOnce.Do(func() {
		file_gameserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_gameserver_proto_rawDescData)
	})
	return file_gameserver_proto_rawDescData
}

var file_gameserver_proto_msgTypes = make([]protoimpl.MessageInfo, 83)
var file_gameserver_proto_goTypes = []interface{}{
	(*Test)(nil),                    // 0: gameserver.Test
	(*Protocol)(nil),                // 1: gameserver.protocol
	(*ScProtocolPack)(nil),          // 2: gameserver.sc_protocol_pack
	(*Heartbeat)(nil),               // 3: gameserver.heartbeat
	(*ScGameDebug)(nil),             // 4: gameserver.sc_game_debug
	(*StHuDesc)(nil),                // 5: gameserver.st_hu_desc
	(*ScGameHideActions)(nil),       // 6: gameserver.sc_game_hide_actions
	(*StplayerInfo)(nil),            // 7: gameserver.stplayer_info
	(*StHandSeq)(nil),               // 8: gameserver.st_hand_seq
	(*ScenterSeatInfo)(nil),         // 9: gameserver.scenter_seat_info
	(*SccontinueSeatInfo)(nil),      // 10: gameserver.sccontinue_seat_info
	(*CsReadyGame)(nil),             // 11: gameserver.cs_ready_game
	(*CsLeaveRoom)(nil),             // 12: gameserver.cs_leave_room
	(*CsGameAction)(nil),            // 13: gameserver.cs_game_action
	(*StLackInfo)(nil),              // 14: gameserver.st_lack_info
	(*ScLackInfos)(nil),             // 15: gameserver.sc_lack_infos
	(*StDismissInfo)(nil),           // 16: gameserver.st_dismiss_info
	(*ScContinueGame)(nil),          // 17: gameserver.sc_continue_game
	(*ScEnterRoomFailed)(nil),       // 18: gameserver.sc_enter_room_failed
	(*ScEnterRoom)(nil),             // 19: gameserver.sc_enter_room
	(*ScEnterRoomNotify)(nil),       // 20: gameserver.sc_enter_room_notify
	(*ScReadyGameFailed)(nil),       // 21: gameserver.sc_ready_game_failed
	(*ScReadyGame)(nil),             // 22: gameserver.sc_ready_game
	(*ScReadyGameNotify)(nil),       // 23: gameserver.sc_ready_game_notify
	(*ScLeaveRoomFailed)(nil),       // 24: gameserver.sc_leave_room_failed
	(*ScLeaveRoom)(nil),             // 25: gameserver.sc_leave_room
	(*ScLeaveRoomNotify)(nil),       // 26: gameserver.sc_leave_room_notify
	(*SccomplexTile)(nil),           // 27: gameserver.sccomplex_tile
	(*AllSeqInfo)(nil),              // 28: gameserver.all_seq_info
	(*OneJuSeqInfo)(nil),            // 29: gameserver.one_ju_seq_info
	(*ScEndGame)(nil),               // 30: gameserver.sc_end_game
	(*ScEndGameGroup)(nil),          // 31: gameserver.sc_end_game_group
	(*ScGameActionFailed)(nil),      // 32: gameserver.sc_game_action_failed
	(*ScGameRefreshHandSeq)(nil),    // 33: gameserver.sc_game_refresh_hand_seq
	(*StMoneyTransfer)(nil),         // 34: gameserver.st_money_transfer
	(*ScGameAction)(nil),            // 35: gameserver.sc_game_action
	(*ScGameActionNotify)(nil),      // 36: gameserver.sc_game_action_notify
	(*HandSeqInfo)(nil),             // 37: gameserver.hand_seq_info
	(*ScStartGame)(nil),             // 38: gameserver.sc_start_game
	(*ScGameShowActions)(nil),       // 39: gameserver.sc_game_show_actions
	(*ScSureLack)(nil),              // 40: gameserver.sc_sure_lack
	(*ScReadyTimer)(nil),            // 41: gameserver.sc_ready_timer
	(*ScGameTurn)(nil),              // 42: gameserver.sc_game_turn
	(*ScGameTurnNotify)(nil),        // 43: gameserver.sc_game_turn_notify
	(*ScBroadcast)(nil),             // 44: gameserver.sc_broadcast
	(*ScSureExchange)(nil),          // 45: gameserver.sc_sure_exchange
	(*ScExchangeInfo)(nil),          // 46: gameserver.sc_exchange_info
	(*ScExchangeTilesResponse)(nil), // 47: gameserver.sc_exchange_tiles_response
	(*ScGiftAction)(nil),            // 48: gameserver.sc_gift_action
	(*ScSeatVoiceid)(nil),           // 49: gameserver.sc_seat_voiceid
	(*ScseatEndGroupInfo)(nil),      // 50: gameserver.scseat_end_group_info
	(*ScEndGroupInfo)(nil),          // 51: gameserver.sc_end_group_info
	(*ScSurePiao)(nil),              // 52: gameserver.sc_sure_piao
	(*ScPiaoInfos)(nil),             // 53: gameserver.sc_piao_infos
	(*SeatGpsInfo)(nil),             // 54: gameserver.seat_gps_info
	(*ScRoomGpsInfo)(nil),           // 55: gameserver.sc_room_gps_info
	(*ScDizhuInfo)(nil),             // 56: gameserver.sc_dizhu_info
	(*CsInspectPlayer)(nil),         // 57: gameserver.cs_inspect_player
	(*ScInspectPlayer)(nil),         // 58: gameserver.sc_inspect_player
	(*CsDismissRoom)(nil),           // 59: gameserver.cs_dismiss_room
	(*ScDismissRoom)(nil),           // 60: gameserver.sc_dismiss_room
	(*ScDismissRoomResult)(nil),     // 61: gameserver.sc_dismiss_room_result
	(*ScDismissRoomNotify)(nil),     // 62: gameserver.sc_dismiss_room_notify
	(*ScQianSiEnd)(nil),             // 63: gameserver.sc_qian_si_end
	(*ScSureAction)(nil),            // 64: gameserver.sc_sure_action
	(*CsAddBot)(nil),                // 65: gameserver.cs_add_bot
	(*CsDebugDismissRoom)(nil),      // 66: gameserver.cs_debug_dismiss_room
	(*CsDebugRunAction)(nil),        // 67: gameserver.cs_debug_run_action
	(*CsGameAuto)(nil),              // 68: gameserver.cs_game_auto
	(*ScGameAuto)(nil),              // 69: gameserver.sc_game_auto
	(*ScGameAutoNotify)(nil),        // 70: gameserver.sc_game_auto_notify
	(*CsGameManual)(nil),            // 71: gameserver.cs_game_manual
	(*CsResendAction)(nil),          // 72: gameserver.cs_resend_action
	(*CsChangeOnline)(nil),          // 73: gameserver.cs_change_online
	(*CsMatchGame)(nil),             // 74: gameserver.cs_match_game
	(*CsReadyMatchGame)(nil),        // 75: gameserver.cs_ready_match_game
	(*ScEnterMatchRoom)(nil),        // 76: gameserver.sc_enter_match_room
	(*CsGameRefreshSeq)(nil),        // 77: gameserver.cs_game_refresh_seq
	(*CsChat)(nil),                  // 78: gameserver.cs_chat
	(*ScChangeOnline)(nil),          // 79: gameserver.sc_change_online
	(*CsGiftAction)(nil),            // 80: gameserver.cs_gift_action
	(*CsSubmitVoiceid)(nil),         // 81: gameserver.cs_submit_voiceid
	(*CsSeatGps)(nil),               // 82: gameserver.cs_seat_gps
}
var file_gameserver_proto_depIdxs = []int32{
	1,  // 0: gameserver.sc_protocol_pack.pack:type_name -> gameserver.protocol
	7,  // 1: gameserver.scenter_seat_info.player_info:type_name -> gameserver.stplayer_info
	7,  // 2: gameserver.sccontinue_seat_info.player_info:type_name -> gameserver.stplayer_info
	8,  // 3: gameserver.sccontinue_seat_info.hand_seq:type_name -> gameserver.st_hand_seq
	27, // 4: gameserver.sccontinue_seat_info.complex_seq:type_name -> gameserver.sccomplex_tile
	5,  // 5: gameserver.sccontinue_seat_info.hu_desc:type_name -> gameserver.st_hu_desc
	14, // 6: gameserver.sc_lack_infos.infos:type_name -> gameserver.st_lack_info
	10, // 7: gameserver.sc_continue_game.seat_infoes:type_name -> gameserver.sccontinue_seat_info
	46, // 8: gameserver.sc_continue_game.exchange_info:type_name -> gameserver.sc_exchange_info
	16, // 9: gameserver.sc_continue_game.dismiss_info:type_name -> gameserver.st_dismiss_info
	9,  // 10: gameserver.sc_enter_room.seat_infoes:type_name -> gameserver.scenter_seat_info
	16, // 11: gameserver.sc_enter_room.dismiss_info:type_name -> gameserver.st_dismiss_info
	9,  // 12: gameserver.sc_enter_room_notify.seat_info:type_name -> gameserver.scenter_seat_info
	28, // 13: gameserver.one_ju_seq_info.seq_infos:type_name -> gameserver.all_seq_info
	28, // 14: gameserver.sc_end_game.seq_infos:type_name -> gameserver.all_seq_info
	29, // 15: gameserver.sc_end_game_group.game_seq_infos:type_name -> gameserver.one_ju_seq_info
	8,  // 16: gameserver.sc_game_refresh_hand_seq.act_hand_seq:type_name -> gameserver.st_hand_seq
	27, // 17: gameserver.sc_game_refresh_hand_seq.act_complex_seq:type_name -> gameserver.sccomplex_tile
	8,  // 18: gameserver.sc_game_action.acted_hand_seq:type_name -> gameserver.st_hand_seq
	8,  // 19: gameserver.sc_game_action_notify.acted_hand_seq:type_name -> gameserver.st_hand_seq
	8,  // 20: gameserver.hand_seq_info.hand_seq:type_name -> gameserver.st_hand_seq
	37, // 21: gameserver.sc_start_game.other_infoes:type_name -> gameserver.hand_seq_info
	37, // 22: gameserver.sc_start_game.you_seq_info:type_name -> gameserver.hand_seq_info
	37, // 23: gameserver.sc_exchange_info.you_seq_info:type_name -> gameserver.hand_seq_info
	37, // 24: gameserver.sc_exchange_tiles_response.you_seq_info:type_name -> gameserver.hand_seq_info
	50, // 25: gameserver.sc_end_group_info.seat_infoes:type_name -> gameserver.scseat_end_group_info
	54, // 26: gameserver.sc_room_gps_info.gps_infoes:type_name -> gameserver.seat_gps_info
	8,  // 27: gameserver.sc_dizhu_info.hand_seq:type_name -> gameserver.st_hand_seq
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_gameserver_proto_init() }
func file_gameserver_proto_init() {
	if File_gameserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gameserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScProtocolPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameDebug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StHuDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameHideActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StplayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StHandSeq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenterSeatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SccontinueSeatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsReadyGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsLeaveRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsGameAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StLackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScLackInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StDismissInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScContinueGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScEnterRoomFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScEnterRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScEnterRoomNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScReadyGameFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScReadyGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScReadyGameNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScLeaveRoomFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScLeaveRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScLeaveRoomNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SccomplexTile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllSeqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneJuSeqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScEndGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScEndGameGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameActionFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameRefreshHandSeq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StMoneyTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameActionNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandSeqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScStartGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameShowActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSureLack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScReadyTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameTurn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameTurnNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSureExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScExchangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScExchangeTilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGiftAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSeatVoiceid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScseatEndGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScEndGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSurePiao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScPiaoInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatGpsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScRoomGpsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScDizhuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsInspectPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScInspectPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsDismissRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScDismissRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScDismissRoomResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScDismissRoomNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScQianSiEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScSureAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsAddBot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsDebugDismissRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsDebugRunAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsGameAuto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameAuto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameAutoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsGameManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsResendAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsChangeOnline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsMatchGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsReadyMatchGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScEnterMatchRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsGameRefreshSeq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScChangeOnline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsGiftAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsSubmitVoiceid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameserver_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsSeatGps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gameserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   83,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gameserver_proto_goTypes,
		DependencyIndexes: file_gameserver_proto_depIdxs,
		MessageInfos:      file_gameserver_proto_msgTypes,
	}.Build()
	File_gameserver_proto = out.File
	file_gameserver_proto_rawDesc = nil
	file_gameserver_proto_goTypes = nil
	file_gameserver_proto_depIdxs = nil
}
